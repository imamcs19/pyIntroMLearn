from flask import Flask, render_template_string, request
from sklearn.datasets import load_iris, load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

app = Flask(__name__)

# Define the datasets and models to use
datasets = {
    "Iris": load_iris(),
    "Breast Cancer": load_breast_cancer()
}

# # Define multiple datasets to compare
# datasets = {
#     'iris': pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', header=None),
#     'wine': pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data', header=None),
#     'breast_cancer': pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data', header=None),
# }

models = {
    "Logistic Regression": LogisticRegression(),
    "Random Forest": RandomForestClassifier()
}

@app.route("/home_multiple_test")
def home_multiple_test():
    template_string = """
    <form method="post" action="/results_multiple_test">
        <label for="dataset">Select a dataset:</label>
        <select name="dataset" id="dataset">
            {% for dataset_name in datasets %}
                <option value="{{ dataset_name }}">{{ dataset_name }}</option>
            {% endfor %}
        </select>
        <br>
        <label for="model">Select a model:</label>
        <select name="model" id="model">
            {% for model_name in models %}
                <option value="{{ model_name }}">{{ model_name }}</option>
            {% endfor %}
        </select>
        <br>
        <input type="submit" value="Submit">
    </form>
    """
    return render_template_string(template_string, datasets=datasets.keys(), models=models.keys())

@app.route("/results_multiple_test", methods=["POST"])
def results_multiple_test():
    dataset_name = request.form.get("dataset")
    model_name = request.form.get("model")
    dataset = datasets[dataset_name]
    model = models[model_name]
    
    # Load the dataset
    X, y = dataset.data, dataset.target
    
    # Split the dataset into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Fit the model on the training data
    model.fit(X_train, y_train)
    
    # Evaluate the model on the testing data
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    
    template_string = """
    <h2>Results for {{ dataset_name }} dataset and {{ model_name }} model:</h2>
    <p>Accuracy: {{ accuracy }}</p>
    """
    return render_template_string(template_string, dataset_name=dataset_name, model_name=model_name, accuracy=accuracy)

if __name__ == "__main__":
    app.run(debug=True)
